
package com.chua.common.support.extra.quickio.core;

/**
 * 雪花算法
 * @author CH
 */
final class Snowflake {

    /**
     * Start time cutoff (January 1, 2015)
     */
    private final static long EPOCH = 1420041600000L;

    /**
     * Number of digits occupied by the machine ID
     */
    private final static long WORKER_ID_BITS = 5L;

    /**
     * Number of digits occupied by data ID
     */
    private final static long DATACENTER_ID_BITS = 5L;

    /**
     * The maximum machine ID supported is 31
     * (this shift algorithm can quickly calculate
     * the maximum decimal number represented by
     * several binary numbers)
     */
    private final static long MAX_WORKER_ID = ~(-1L << WORKER_ID_BITS);

    /**
     * The maximum supported data ID is 31
     */
    private final static long MAX_DATACENTER_ID = ~(-1L << DATACENTER_ID_BITS);

    /**
     * Number of digits occupied by the sequence in the ID
     */
    private final static long SEQUENCE_BITS = 12L;

    /**
     * Machine ID moves 12 bits to the left
     */
    private final static long WORKER_ID_SHIFT = SEQUENCE_BITS;

    /**
     * Move the data ID 17 bits to the left (12+5)
     */
    private final static long DATACENTER_ID_SHIFT = SEQUENCE_BITS + WORKER_ID_BITS;

    /**
     * Move the time cutoff 22 bits to the left (5+5+12)
     */
    private final static long TIMESTAMP_LEFT_SHIFT = SEQUENCE_BITS + WORKER_ID_BITS + DATACENTER_ID_BITS;

    /**
     * The mask of the generated sequence, which is 4095 (0b1111111111111=0xfff=4095)
     */
    private final static long SEQUENCE_MASK = ~(-1L << SEQUENCE_BITS);

    /**
     * Working machine ID (0~31)
     */
    private final long workerId;

    /**
     * Data center ID (0~31)
     */
    private final long datacenterId;

    /**
     * Sequence in milliseconds (0~4095)
     */
    private long sequence;

    /**
     * Last ID generation time
     */
    private long lastTimestamp = -1L;


    /**
     * workerId(0 ~ 31), datacenterId(0 ~ 31)
     */
    Snowflake(long workerId, long datacenterId) {
        if (workerId > MAX_WORKER_ID || workerId < 0) {
            throw new IllegalArgumentException(String.format("worker Id " +
                    "can't be greater than %d or less than 0", MAX_WORKER_ID));
        }
        if (datacenterId > MAX_DATACENTER_ID || datacenterId < 0) {
            throw new IllegalArgumentException(String.format("datacenter Id " +
                    "can't be greater than %d or less than 0", MAX_DATACENTER_ID));
        }
        this.workerId = workerId;
        this.datacenterId = datacenterId;
        sequence = 0L;
    }


    /**
     * Block to the next millisecond until a new timestamp is obtained
     * lastTimestamp:  Last ID generation time
     */
    private long tilNextMillis(long lastTimestamp) {
        long timestamp = timeGen();
        while (timestamp <= lastTimestamp) {
            timestamp = timeGen();
        }
        return timestamp;
    }


    /**
     * Returns the current time in milliseconds (milliseconds)
     */
    private long timeGen() {
        return System.currentTimeMillis();
    }


    /**
     * Get the next ID (this method is thread safe)
     */
    synchronized long nextId() {
        long timestamp = timeGen();

        //If the current time is less than the timestamp generated by the last ID,
        // it means that the system clock should throw an exception when it goes back
        if (timestamp < lastTimestamp) {
            throw new RuntimeException(String.format("Clock moved backwards.  " +
                    "Refusing to generate id for %d milliseconds", lastTimestamp - timestamp));
        }

        //If it is generated at the same time, sequence within milliseconds
        if (lastTimestamp == timestamp) {
            sequence = (sequence + 1) & SEQUENCE_MASK;
            //Sequence overflow in milliseconds
            if (sequence == 0) {
                //Block to the next millisecond to obtain a new timestamp
                timestamp = tilNextMillis(lastTimestamp);
            }
        }
        //Timestamp change, sequence reset within milliseconds
        else {
            sequence = 0L;
        }

        //Last ID generation time
        lastTimestamp = timestamp;

        //The 64-bit ID is formed by shifting and or operation
        return ((timestamp - EPOCH) << TIMESTAMP_LEFT_SHIFT)
                | (datacenterId << DATACENTER_ID_SHIFT)
                | (workerId << WORKER_ID_SHIFT)
                | sequence;
    }


    /**
     * through id activity timestamp
     */
    long toTimestamp(long snowId) {
        String id = Long.toBinaryString(snowId);
        long timestamp = id.length() - (WORKER_ID_BITS + DATACENTER_ID_BITS + SEQUENCE_BITS);
        String s = id.substring(0, (int) timestamp);
        return Long.parseUnsignedLong(s, 2) + EPOCH;
    }

}